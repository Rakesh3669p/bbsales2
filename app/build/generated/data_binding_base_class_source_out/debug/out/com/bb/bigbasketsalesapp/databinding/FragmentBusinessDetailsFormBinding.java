// Generated by view binder compiler. Do not edit!
package com.bb.bigbasketsalesapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bb.bigbasketsalesapp.R;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentBusinessDetailsFormBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final TextInputEditText ambience;

  @NonNull
  public final TextInputEditText businessValue;

  @NonNull
  public final TextInputEditText competitorsDomain;

  @NonNull
  public final Spinner enquiryStatusSpinner;

  @NonNull
  public final Spinner enquiryTypeSpinner;

  @NonNull
  public final TextInputEditText expectedBusinessPerMonth;

  @NonNull
  public final TextInputEditText howIsStoreFront;

  @NonNull
  public final TextInputEditText howToJoinYou;

  @NonNull
  public final TextInputEditText howToServerYourself;

  @NonNull
  public final TextInputEditText mainNeeds;

  @NonNull
  public final TextInputEditText need;

  @NonNull
  public final TextView needCompetitors;

  @NonNull
  public final TextInputEditText numberOfSeats;

  @NonNull
  public final TextView otherDetails;

  @NonNull
  public final TextView previous;

  @NonNull
  public final TextInputEditText qty;

  @NonNull
  public final EditText remarkEdt;

  @NonNull
  public final TextView remarksLbl;

  @NonNull
  public final Spinner restaurantSpinner;

  @NonNull
  public final TextInputEditText storeInterior;

  @NonNull
  public final TextView submit;

  @NonNull
  public final TextInputLayout textInputLayout10;

  @NonNull
  public final TextInputLayout textInputLayout11;

  @NonNull
  public final TextInputLayout textInputLayout12;

  @NonNull
  public final TextInputLayout textInputLayout13;

  @NonNull
  public final TextInputLayout textInputLayout14;

  @NonNull
  public final TextInputLayout textInputLayout15;

  @NonNull
  public final TextInputLayout textInputLayout2;

  @NonNull
  public final TextInputLayout textInputLayout3;

  @NonNull
  public final TextInputLayout textInputLayout4;

  @NonNull
  public final TextInputLayout textInputLayout5;

  @NonNull
  public final TextInputLayout textInputLayout6;

  @NonNull
  public final TextInputLayout textInputLayout7;

  @NonNull
  public final TextInputLayout textInputLayout8;

  @NonNull
  public final TextInputLayout textInputLayout9;

  @NonNull
  public final TextInputEditText turnover;

  @NonNull
  public final TextInputEditText typology;

  private FragmentBusinessDetailsFormBinding(@NonNull NestedScrollView rootView,
      @NonNull TextInputEditText ambience, @NonNull TextInputEditText businessValue,
      @NonNull TextInputEditText competitorsDomain, @NonNull Spinner enquiryStatusSpinner,
      @NonNull Spinner enquiryTypeSpinner, @NonNull TextInputEditText expectedBusinessPerMonth,
      @NonNull TextInputEditText howIsStoreFront, @NonNull TextInputEditText howToJoinYou,
      @NonNull TextInputEditText howToServerYourself, @NonNull TextInputEditText mainNeeds,
      @NonNull TextInputEditText need, @NonNull TextView needCompetitors,
      @NonNull TextInputEditText numberOfSeats, @NonNull TextView otherDetails,
      @NonNull TextView previous, @NonNull TextInputEditText qty, @NonNull EditText remarkEdt,
      @NonNull TextView remarksLbl, @NonNull Spinner restaurantSpinner,
      @NonNull TextInputEditText storeInterior, @NonNull TextView submit,
      @NonNull TextInputLayout textInputLayout10, @NonNull TextInputLayout textInputLayout11,
      @NonNull TextInputLayout textInputLayout12, @NonNull TextInputLayout textInputLayout13,
      @NonNull TextInputLayout textInputLayout14, @NonNull TextInputLayout textInputLayout15,
      @NonNull TextInputLayout textInputLayout2, @NonNull TextInputLayout textInputLayout3,
      @NonNull TextInputLayout textInputLayout4, @NonNull TextInputLayout textInputLayout5,
      @NonNull TextInputLayout textInputLayout6, @NonNull TextInputLayout textInputLayout7,
      @NonNull TextInputLayout textInputLayout8, @NonNull TextInputLayout textInputLayout9,
      @NonNull TextInputEditText turnover, @NonNull TextInputEditText typology) {
    this.rootView = rootView;
    this.ambience = ambience;
    this.businessValue = businessValue;
    this.competitorsDomain = competitorsDomain;
    this.enquiryStatusSpinner = enquiryStatusSpinner;
    this.enquiryTypeSpinner = enquiryTypeSpinner;
    this.expectedBusinessPerMonth = expectedBusinessPerMonth;
    this.howIsStoreFront = howIsStoreFront;
    this.howToJoinYou = howToJoinYou;
    this.howToServerYourself = howToServerYourself;
    this.mainNeeds = mainNeeds;
    this.need = need;
    this.needCompetitors = needCompetitors;
    this.numberOfSeats = numberOfSeats;
    this.otherDetails = otherDetails;
    this.previous = previous;
    this.qty = qty;
    this.remarkEdt = remarkEdt;
    this.remarksLbl = remarksLbl;
    this.restaurantSpinner = restaurantSpinner;
    this.storeInterior = storeInterior;
    this.submit = submit;
    this.textInputLayout10 = textInputLayout10;
    this.textInputLayout11 = textInputLayout11;
    this.textInputLayout12 = textInputLayout12;
    this.textInputLayout13 = textInputLayout13;
    this.textInputLayout14 = textInputLayout14;
    this.textInputLayout15 = textInputLayout15;
    this.textInputLayout2 = textInputLayout2;
    this.textInputLayout3 = textInputLayout3;
    this.textInputLayout4 = textInputLayout4;
    this.textInputLayout5 = textInputLayout5;
    this.textInputLayout6 = textInputLayout6;
    this.textInputLayout7 = textInputLayout7;
    this.textInputLayout8 = textInputLayout8;
    this.textInputLayout9 = textInputLayout9;
    this.turnover = turnover;
    this.typology = typology;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentBusinessDetailsFormBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentBusinessDetailsFormBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_business_details_form, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentBusinessDetailsFormBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ambience;
      TextInputEditText ambience = ViewBindings.findChildViewById(rootView, id);
      if (ambience == null) {
        break missingId;
      }

      id = R.id.businessValue;
      TextInputEditText businessValue = ViewBindings.findChildViewById(rootView, id);
      if (businessValue == null) {
        break missingId;
      }

      id = R.id.competitorsDomain;
      TextInputEditText competitorsDomain = ViewBindings.findChildViewById(rootView, id);
      if (competitorsDomain == null) {
        break missingId;
      }

      id = R.id.enquiryStatusSpinner;
      Spinner enquiryStatusSpinner = ViewBindings.findChildViewById(rootView, id);
      if (enquiryStatusSpinner == null) {
        break missingId;
      }

      id = R.id.enquiryTypeSpinner;
      Spinner enquiryTypeSpinner = ViewBindings.findChildViewById(rootView, id);
      if (enquiryTypeSpinner == null) {
        break missingId;
      }

      id = R.id.expectedBusinessPerMonth;
      TextInputEditText expectedBusinessPerMonth = ViewBindings.findChildViewById(rootView, id);
      if (expectedBusinessPerMonth == null) {
        break missingId;
      }

      id = R.id.howIsStoreFront;
      TextInputEditText howIsStoreFront = ViewBindings.findChildViewById(rootView, id);
      if (howIsStoreFront == null) {
        break missingId;
      }

      id = R.id.howToJoinYou;
      TextInputEditText howToJoinYou = ViewBindings.findChildViewById(rootView, id);
      if (howToJoinYou == null) {
        break missingId;
      }

      id = R.id.howToServerYourself;
      TextInputEditText howToServerYourself = ViewBindings.findChildViewById(rootView, id);
      if (howToServerYourself == null) {
        break missingId;
      }

      id = R.id.mainNeeds;
      TextInputEditText mainNeeds = ViewBindings.findChildViewById(rootView, id);
      if (mainNeeds == null) {
        break missingId;
      }

      id = R.id.need;
      TextInputEditText need = ViewBindings.findChildViewById(rootView, id);
      if (need == null) {
        break missingId;
      }

      id = R.id.needCompetitors;
      TextView needCompetitors = ViewBindings.findChildViewById(rootView, id);
      if (needCompetitors == null) {
        break missingId;
      }

      id = R.id.numberOfSeats;
      TextInputEditText numberOfSeats = ViewBindings.findChildViewById(rootView, id);
      if (numberOfSeats == null) {
        break missingId;
      }

      id = R.id.otherDetails;
      TextView otherDetails = ViewBindings.findChildViewById(rootView, id);
      if (otherDetails == null) {
        break missingId;
      }

      id = R.id.previous;
      TextView previous = ViewBindings.findChildViewById(rootView, id);
      if (previous == null) {
        break missingId;
      }

      id = R.id.qty;
      TextInputEditText qty = ViewBindings.findChildViewById(rootView, id);
      if (qty == null) {
        break missingId;
      }

      id = R.id.remarkEdt;
      EditText remarkEdt = ViewBindings.findChildViewById(rootView, id);
      if (remarkEdt == null) {
        break missingId;
      }

      id = R.id.remarksLbl;
      TextView remarksLbl = ViewBindings.findChildViewById(rootView, id);
      if (remarksLbl == null) {
        break missingId;
      }

      id = R.id.restaurantSpinner;
      Spinner restaurantSpinner = ViewBindings.findChildViewById(rootView, id);
      if (restaurantSpinner == null) {
        break missingId;
      }

      id = R.id.storeInterior;
      TextInputEditText storeInterior = ViewBindings.findChildViewById(rootView, id);
      if (storeInterior == null) {
        break missingId;
      }

      id = R.id.submit;
      TextView submit = ViewBindings.findChildViewById(rootView, id);
      if (submit == null) {
        break missingId;
      }

      id = R.id.textInputLayout10;
      TextInputLayout textInputLayout10 = ViewBindings.findChildViewById(rootView, id);
      if (textInputLayout10 == null) {
        break missingId;
      }

      id = R.id.textInputLayout11;
      TextInputLayout textInputLayout11 = ViewBindings.findChildViewById(rootView, id);
      if (textInputLayout11 == null) {
        break missingId;
      }

      id = R.id.textInputLayout12;
      TextInputLayout textInputLayout12 = ViewBindings.findChildViewById(rootView, id);
      if (textInputLayout12 == null) {
        break missingId;
      }

      id = R.id.textInputLayout13;
      TextInputLayout textInputLayout13 = ViewBindings.findChildViewById(rootView, id);
      if (textInputLayout13 == null) {
        break missingId;
      }

      id = R.id.textInputLayout14;
      TextInputLayout textInputLayout14 = ViewBindings.findChildViewById(rootView, id);
      if (textInputLayout14 == null) {
        break missingId;
      }

      id = R.id.textInputLayout15;
      TextInputLayout textInputLayout15 = ViewBindings.findChildViewById(rootView, id);
      if (textInputLayout15 == null) {
        break missingId;
      }

      id = R.id.textInputLayout2;
      TextInputLayout textInputLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (textInputLayout2 == null) {
        break missingId;
      }

      id = R.id.textInputLayout3;
      TextInputLayout textInputLayout3 = ViewBindings.findChildViewById(rootView, id);
      if (textInputLayout3 == null) {
        break missingId;
      }

      id = R.id.textInputLayout4;
      TextInputLayout textInputLayout4 = ViewBindings.findChildViewById(rootView, id);
      if (textInputLayout4 == null) {
        break missingId;
      }

      id = R.id.textInputLayout5;
      TextInputLayout textInputLayout5 = ViewBindings.findChildViewById(rootView, id);
      if (textInputLayout5 == null) {
        break missingId;
      }

      id = R.id.textInputLayout6;
      TextInputLayout textInputLayout6 = ViewBindings.findChildViewById(rootView, id);
      if (textInputLayout6 == null) {
        break missingId;
      }

      id = R.id.textInputLayout7;
      TextInputLayout textInputLayout7 = ViewBindings.findChildViewById(rootView, id);
      if (textInputLayout7 == null) {
        break missingId;
      }

      id = R.id.textInputLayout8;
      TextInputLayout textInputLayout8 = ViewBindings.findChildViewById(rootView, id);
      if (textInputLayout8 == null) {
        break missingId;
      }

      id = R.id.textInputLayout9;
      TextInputLayout textInputLayout9 = ViewBindings.findChildViewById(rootView, id);
      if (textInputLayout9 == null) {
        break missingId;
      }

      id = R.id.turnover;
      TextInputEditText turnover = ViewBindings.findChildViewById(rootView, id);
      if (turnover == null) {
        break missingId;
      }

      id = R.id.typology;
      TextInputEditText typology = ViewBindings.findChildViewById(rootView, id);
      if (typology == null) {
        break missingId;
      }

      return new FragmentBusinessDetailsFormBinding((NestedScrollView) rootView, ambience,
          businessValue, competitorsDomain, enquiryStatusSpinner, enquiryTypeSpinner,
          expectedBusinessPerMonth, howIsStoreFront, howToJoinYou, howToServerYourself, mainNeeds,
          need, needCompetitors, numberOfSeats, otherDetails, previous, qty, remarkEdt, remarksLbl,
          restaurantSpinner, storeInterior, submit, textInputLayout10, textInputLayout11,
          textInputLayout12, textInputLayout13, textInputLayout14, textInputLayout15,
          textInputLayout2, textInputLayout3, textInputLayout4, textInputLayout5, textInputLayout6,
          textInputLayout7, textInputLayout8, textInputLayout9, turnover, typology);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
