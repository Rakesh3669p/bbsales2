// Generated by view binder compiler. Do not edit!
package com.bb.bigbasketsalesapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bb.bigbasketsalesapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemFollowUpsBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView followUpDate;

  @NonNull
  public final TextView followUpSales;

  @NonNull
  public final TextView followUpShop;

  @NonNull
  public final TextView followUpTime;

  @NonNull
  public final TextView followUpTitle;

  private ItemFollowUpsBinding(@NonNull CardView rootView, @NonNull TextView followUpDate,
      @NonNull TextView followUpSales, @NonNull TextView followUpShop,
      @NonNull TextView followUpTime, @NonNull TextView followUpTitle) {
    this.rootView = rootView;
    this.followUpDate = followUpDate;
    this.followUpSales = followUpSales;
    this.followUpShop = followUpShop;
    this.followUpTime = followUpTime;
    this.followUpTitle = followUpTitle;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemFollowUpsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemFollowUpsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_follow_ups, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemFollowUpsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.followUpDate;
      TextView followUpDate = ViewBindings.findChildViewById(rootView, id);
      if (followUpDate == null) {
        break missingId;
      }

      id = R.id.followUpSales;
      TextView followUpSales = ViewBindings.findChildViewById(rootView, id);
      if (followUpSales == null) {
        break missingId;
      }

      id = R.id.followUpShop;
      TextView followUpShop = ViewBindings.findChildViewById(rootView, id);
      if (followUpShop == null) {
        break missingId;
      }

      id = R.id.followUpTime;
      TextView followUpTime = ViewBindings.findChildViewById(rootView, id);
      if (followUpTime == null) {
        break missingId;
      }

      id = R.id.followUpTitle;
      TextView followUpTitle = ViewBindings.findChildViewById(rootView, id);
      if (followUpTitle == null) {
        break missingId;
      }

      return new ItemFollowUpsBinding((CardView) rootView, followUpDate, followUpSales,
          followUpShop, followUpTime, followUpTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
