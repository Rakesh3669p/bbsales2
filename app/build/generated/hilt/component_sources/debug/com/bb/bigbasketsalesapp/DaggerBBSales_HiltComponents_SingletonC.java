// Generated by Dagger (https://dagger.dev).
package com.bb.bigbasketsalesapp;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.bb.bigbasketsalesapp.data.BBSalesRepository;
import com.bb.bigbasketsalesapp.di.AppModule;
import com.bb.bigbasketsalesapp.di.AppModule_ProvideRepositoryFactory;
import com.bb.bigbasketsalesapp.di.AppModule_ProvideSessionManagerFactory;
import com.bb.bigbasketsalesapp.ui.MainActivity;
import com.bb.bigbasketsalesapp.ui.MainActivity_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.TargetVsSalesFragment;
import com.bb.bigbasketsalesapp.ui.fragments.TargetVsSalesFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.changePasswordLogin.ChangePasswordLogin;
import com.bb.bigbasketsalesapp.ui.fragments.changePasswordLogin.ChangePasswordLogin_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.customersList.CustomersListFragment;
import com.bb.bigbasketsalesapp.ui.fragments.customersList.CustomersListFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.customersList.adapter.CustomerListAdapter;
import com.bb.bigbasketsalesapp.ui.fragments.followUps.AddFollowUpsFragment;
import com.bb.bigbasketsalesapp.ui.fragments.followUps.AddFollowUpsFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.followUps.FollowUpListFragment;
import com.bb.bigbasketsalesapp.ui.fragments.followUps.FollowUpListFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.followUps.adapter.FollowUpAdapter;
import com.bb.bigbasketsalesapp.ui.fragments.followUps.adapter.FollowUpCouponAdapter;
import com.bb.bigbasketsalesapp.ui.fragments.home.HomeFragment;
import com.bb.bigbasketsalesapp.ui.fragments.home.HomeFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.manageCustomers.AddCustomerFragment;
import com.bb.bigbasketsalesapp.ui.fragments.manageCustomers.AddCustomerFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.manageCustomers.BasicDetailsFormFragment;
import com.bb.bigbasketsalesapp.ui.fragments.manageCustomers.BasicDetailsFormFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.manageCustomers.BusinessDetailsFormFragment;
import com.bb.bigbasketsalesapp.ui.fragments.manageCustomers.BusinessDetailsFormFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.manageCustomers.EditCustomerFragment;
import com.bb.bigbasketsalesapp.ui.fragments.manageCustomers.EditCustomerFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.notificationMessages.ChatFragment;
import com.bb.bigbasketsalesapp.ui.fragments.notificationMessages.ChatFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.notificationMessages.MessageListFragment;
import com.bb.bigbasketsalesapp.ui.fragments.notificationMessages.MessageListFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.notificationMessages.NotificationListFragment;
import com.bb.bigbasketsalesapp.ui.fragments.notificationMessages.NotificationListFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.notificationMessages.NotificationsMessagesFragment;
import com.bb.bigbasketsalesapp.ui.fragments.notificationMessages.NotificationsMessagesFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.notificationMessages.adapter.ChatAdapter;
import com.bb.bigbasketsalesapp.ui.fragments.notificationMessages.adapter.ChatListAdapter;
import com.bb.bigbasketsalesapp.ui.fragments.notificationMessages.adapter.MessagesListAdapter;
import com.bb.bigbasketsalesapp.ui.fragments.notificationMessages.adapter.NotificationListAdapter;
import com.bb.bigbasketsalesapp.ui.fragments.notificationMessages.viewModel.ChatViewModel;
import com.bb.bigbasketsalesapp.ui.fragments.notificationMessages.viewModel.ChatViewModel_HiltModules_KeyModule_ProvideFactory;
import com.bb.bigbasketsalesapp.ui.fragments.offers.OffersFragment;
import com.bb.bigbasketsalesapp.ui.fragments.offers.OffersFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.offers.adapter.OffersAdapter;
import com.bb.bigbasketsalesapp.ui.fragments.productList.ProductListFragment;
import com.bb.bigbasketsalesapp.ui.fragments.productList.ProductListFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.productList.adapter.ProductListAdapter;
import com.bb.bigbasketsalesapp.ui.fragments.profile.EditProfileFragment;
import com.bb.bigbasketsalesapp.ui.fragments.profile.EditProfileFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.profile.ProfileFragment;
import com.bb.bigbasketsalesapp.ui.fragments.profile.ProfileFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.revenue.RevenueFragment;
import com.bb.bigbasketsalesapp.ui.fragments.revenue.RevenueFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.fragments.revenue.adapter.RevenueAdapter;
import com.bb.bigbasketsalesapp.ui.fragments.statistics.StatisticsFragment;
import com.bb.bigbasketsalesapp.ui.fragments.statistics.StatisticsFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.loginSignUp.ChangePasswordFragment;
import com.bb.bigbasketsalesapp.ui.loginSignUp.ChangePasswordFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.loginSignUp.ForgotPasswordFragment;
import com.bb.bigbasketsalesapp.ui.loginSignUp.ForgotPasswordFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.loginSignUp.LoginFragment;
import com.bb.bigbasketsalesapp.ui.loginSignUp.LoginFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.loginSignUp.LoginSignupActivity;
import com.bb.bigbasketsalesapp.ui.loginSignUp.LoginSignupActivity_MembersInjector;
import com.bb.bigbasketsalesapp.ui.loginSignUp.OTPFragment;
import com.bb.bigbasketsalesapp.ui.loginSignUp.OTPFragment_MembersInjector;
import com.bb.bigbasketsalesapp.ui.viewModel.LoginViewModel;
import com.bb.bigbasketsalesapp.ui.viewModel.LoginViewModel_HiltModules_KeyModule_ProvideFactory;
import com.bb.bigbasketsalesapp.ui.viewModel.MainViewModel;
import com.bb.bigbasketsalesapp.ui.viewModel.MainViewModel_HiltModules_KeyModule_ProvideFactory;
import com.bb.bigbasketsalesapp.utils.SessionManager;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerBBSales_HiltComponents_SingletonC {
  private DaggerBBSales_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private AppModule appModule;

    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    public BBSales_HiltComponents.SingletonC build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(appModule, applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements BBSales_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public BBSales_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements BBSales_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public BBSales_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements BBSales_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public BBSales_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements BBSales_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public BBSales_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements BBSales_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public BBSales_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements BBSales_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public BBSales_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements BBSales_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public BBSales_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends BBSales_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends BBSales_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectTargetVsSalesFragment(TargetVsSalesFragment targetVsSalesFragment) {
      injectTargetVsSalesFragment2(targetVsSalesFragment);
    }

    @Override
    public void injectChangePasswordLogin(ChangePasswordLogin changePasswordLogin) {
      injectChangePasswordLogin2(changePasswordLogin);
    }

    @Override
    public void injectCustomersListFragment(CustomersListFragment customersListFragment) {
      injectCustomersListFragment2(customersListFragment);
    }

    @Override
    public void injectAddFollowUpsFragment(AddFollowUpsFragment addFollowUpsFragment) {
      injectAddFollowUpsFragment2(addFollowUpsFragment);
    }

    @Override
    public void injectFollowUpListFragment(FollowUpListFragment followUpListFragment) {
      injectFollowUpListFragment2(followUpListFragment);
    }

    @Override
    public void injectHomeFragment(HomeFragment homeFragment) {
      injectHomeFragment2(homeFragment);
    }

    @Override
    public void injectAddCustomerFragment(AddCustomerFragment addCustomerFragment) {
      injectAddCustomerFragment2(addCustomerFragment);
    }

    @Override
    public void injectBasicDetailsFormFragment(BasicDetailsFormFragment basicDetailsFormFragment) {
      injectBasicDetailsFormFragment2(basicDetailsFormFragment);
    }

    @Override
    public void injectBusinessDetailsFormFragment(
        BusinessDetailsFormFragment businessDetailsFormFragment) {
      injectBusinessDetailsFormFragment2(businessDetailsFormFragment);
    }

    @Override
    public void injectEditCustomerFragment(EditCustomerFragment editCustomerFragment) {
      injectEditCustomerFragment2(editCustomerFragment);
    }

    @Override
    public void injectChatFragment(ChatFragment chatFragment) {
      injectChatFragment2(chatFragment);
    }

    @Override
    public void injectMessageListFragment(MessageListFragment messageListFragment) {
      injectMessageListFragment2(messageListFragment);
    }

    @Override
    public void injectNotificationListFragment(NotificationListFragment notificationListFragment) {
      injectNotificationListFragment2(notificationListFragment);
    }

    @Override
    public void injectNotificationsMessagesFragment(
        NotificationsMessagesFragment notificationsMessagesFragment) {
      injectNotificationsMessagesFragment2(notificationsMessagesFragment);
    }

    @Override
    public void injectOffersFragment(OffersFragment offersFragment) {
      injectOffersFragment2(offersFragment);
    }

    @Override
    public void injectProductListFragment(ProductListFragment productListFragment) {
      injectProductListFragment2(productListFragment);
    }

    @Override
    public void injectEditProfileFragment(EditProfileFragment editProfileFragment) {
      injectEditProfileFragment2(editProfileFragment);
    }

    @Override
    public void injectProfileFragment(ProfileFragment profileFragment) {
      injectProfileFragment2(profileFragment);
    }

    @Override
    public void injectRevenueFragment(RevenueFragment revenueFragment) {
      injectRevenueFragment2(revenueFragment);
    }

    @Override
    public void injectStatisticsFragment(StatisticsFragment statisticsFragment) {
      injectStatisticsFragment2(statisticsFragment);
    }

    @Override
    public void injectChangePasswordFragment(ChangePasswordFragment changePasswordFragment) {
      injectChangePasswordFragment2(changePasswordFragment);
    }

    @Override
    public void injectForgotPasswordFragment(ForgotPasswordFragment forgotPasswordFragment) {
      injectForgotPasswordFragment2(forgotPasswordFragment);
    }

    @Override
    public void injectLoginFragment(LoginFragment loginFragment) {
      injectLoginFragment2(loginFragment);
    }

    @Override
    public void injectOTPFragment(OTPFragment oTPFragment) {
      injectOTPFragment2(oTPFragment);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    private TargetVsSalesFragment injectTargetVsSalesFragment2(TargetVsSalesFragment instance) {
      TargetVsSalesFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      return instance;
    }

    private ChangePasswordLogin injectChangePasswordLogin2(ChangePasswordLogin instance) {
      ChangePasswordLogin_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      return instance;
    }

    private CustomersListFragment injectCustomersListFragment2(CustomersListFragment instance) {
      CustomersListFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      CustomersListFragment_MembersInjector.injectCustomerListAdapter(instance, new CustomerListAdapter());
      return instance;
    }

    private AddFollowUpsFragment injectAddFollowUpsFragment2(AddFollowUpsFragment instance) {
      AddFollowUpsFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      AddFollowUpsFragment_MembersInjector.injectFollowUpAdapter(instance, new FollowUpAdapter());
      AddFollowUpsFragment_MembersInjector.injectFollowUpCouponAdapter(instance, new FollowUpCouponAdapter());
      return instance;
    }

    private FollowUpListFragment injectFollowUpListFragment2(FollowUpListFragment instance) {
      FollowUpListFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      FollowUpListFragment_MembersInjector.injectFollowUpAdapter(instance, new FollowUpAdapter());
      return instance;
    }

    private HomeFragment injectHomeFragment2(HomeFragment instance) {
      HomeFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      return instance;
    }

    private AddCustomerFragment injectAddCustomerFragment2(AddCustomerFragment instance) {
      AddCustomerFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      AddCustomerFragment_MembersInjector.injectNotificationListAdapter(instance, new NotificationListAdapter());
      return instance;
    }

    private BasicDetailsFormFragment injectBasicDetailsFormFragment2(
        BasicDetailsFormFragment instance) {
      BasicDetailsFormFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      return instance;
    }

    private BusinessDetailsFormFragment injectBusinessDetailsFormFragment2(
        BusinessDetailsFormFragment instance) {
      BusinessDetailsFormFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      BusinessDetailsFormFragment_MembersInjector.injectNotificationListAdapter(instance, new NotificationListAdapter());
      return instance;
    }

    private EditCustomerFragment injectEditCustomerFragment2(EditCustomerFragment instance) {
      EditCustomerFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      EditCustomerFragment_MembersInjector.injectNotificationListAdapter(instance, new NotificationListAdapter());
      return instance;
    }

    private ChatFragment injectChatFragment2(ChatFragment instance) {
      ChatFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      ChatFragment_MembersInjector.injectChatAdapter(instance, new ChatAdapter());
      return instance;
    }

    private MessageListFragment injectMessageListFragment2(MessageListFragment instance) {
      MessageListFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      MessageListFragment_MembersInjector.injectChatListAdapter(instance, new ChatListAdapter());
      MessageListFragment_MembersInjector.injectMessageListAdapter(instance, new MessagesListAdapter());
      return instance;
    }

    private NotificationListFragment injectNotificationListFragment2(
        NotificationListFragment instance) {
      NotificationListFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      NotificationListFragment_MembersInjector.injectNotificationListAdapter(instance, new NotificationListAdapter());
      return instance;
    }

    private NotificationsMessagesFragment injectNotificationsMessagesFragment2(
        NotificationsMessagesFragment instance) {
      NotificationsMessagesFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      return instance;
    }

    private OffersFragment injectOffersFragment2(OffersFragment instance) {
      OffersFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      OffersFragment_MembersInjector.injectOffersAdapter(instance, new OffersAdapter());
      return instance;
    }

    private ProductListFragment injectProductListFragment2(ProductListFragment instance) {
      ProductListFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      ProductListFragment_MembersInjector.injectProductListAdapter(instance, new ProductListAdapter());
      return instance;
    }

    private EditProfileFragment injectEditProfileFragment2(EditProfileFragment instance) {
      EditProfileFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      return instance;
    }

    private ProfileFragment injectProfileFragment2(ProfileFragment instance) {
      ProfileFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      return instance;
    }

    private RevenueFragment injectRevenueFragment2(RevenueFragment instance) {
      RevenueFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      RevenueFragment_MembersInjector.injectRevenueAdapter(instance, new RevenueAdapter());
      return instance;
    }

    private StatisticsFragment injectStatisticsFragment2(StatisticsFragment instance) {
      StatisticsFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      return instance;
    }

    private ChangePasswordFragment injectChangePasswordFragment2(ChangePasswordFragment instance) {
      ChangePasswordFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      return instance;
    }

    private ForgotPasswordFragment injectForgotPasswordFragment2(ForgotPasswordFragment instance) {
      ForgotPasswordFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      return instance;
    }

    private LoginFragment injectLoginFragment2(LoginFragment instance) {
      LoginFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      return instance;
    }

    private OTPFragment injectOTPFragment2(OTPFragment instance) {
      OTPFragment_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      return instance;
    }
  }

  private static final class ViewCImpl extends BBSales_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends BBSales_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
      injectMainActivity2(mainActivity);
    }

    @Override
    public void injectLoginSignupActivity(LoginSignupActivity loginSignupActivity) {
      injectLoginSignupActivity2(loginSignupActivity);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(3).add(ChatViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(LoginViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MainViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    private MainActivity injectMainActivity2(MainActivity instance) {
      MainActivity_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      return instance;
    }

    private LoginSignupActivity injectLoginSignupActivity2(LoginSignupActivity instance) {
      LoginSignupActivity_MembersInjector.injectSession(instance, singletonCImpl.provideSessionManagerProvider.get());
      return instance;
    }
  }

  private static final class ViewModelCImpl extends BBSales_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<ChatViewModel> chatViewModelProvider;

    private Provider<LoginViewModel> loginViewModelProvider;

    private Provider<MainViewModel> mainViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.chatViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.loginViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.mainViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(3).put("com.bb.bigbasketsalesapp.ui.fragments.notificationMessages.viewModel.ChatViewModel", ((Provider) chatViewModelProvider)).put("com.bb.bigbasketsalesapp.ui.viewModel.LoginViewModel", ((Provider) loginViewModelProvider)).put("com.bb.bigbasketsalesapp.ui.viewModel.MainViewModel", ((Provider) mainViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.bb.bigbasketsalesapp.ui.fragments.notificationMessages.viewModel.ChatViewModel 
          return (T) new ChatViewModel(singletonCImpl.provideRepositoryProvider.get(), singletonCImpl.provideSessionManagerProvider.get());

          case 1: // com.bb.bigbasketsalesapp.ui.viewModel.LoginViewModel 
          return (T) new LoginViewModel(singletonCImpl.provideRepositoryProvider.get());

          case 2: // com.bb.bigbasketsalesapp.ui.viewModel.MainViewModel 
          return (T) new MainViewModel(singletonCImpl.provideRepositoryProvider.get(), singletonCImpl.provideSessionManagerProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends BBSales_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends BBSales_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends BBSales_HiltComponents.SingletonC {
    private final AppModule appModule;

    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<SessionManager> provideSessionManagerProvider;

    private Provider<BBSalesRepository> provideRepositoryProvider;

    private SingletonCImpl(AppModule appModuleParam,
        ApplicationContextModule applicationContextModuleParam) {
      this.appModule = appModuleParam;
      this.applicationContextModule = applicationContextModuleParam;
      initialize(appModuleParam, applicationContextModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final AppModule appModuleParam,
        final ApplicationContextModule applicationContextModuleParam) {
      this.provideSessionManagerProvider = DoubleCheck.provider(new SwitchingProvider<SessionManager>(singletonCImpl, 0));
      this.provideRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<BBSalesRepository>(singletonCImpl, 1));
    }

    @Override
    public void injectBBSales(BBSales bBSales) {
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.bb.bigbasketsalesapp.utils.SessionManager 
          return (T) AppModule_ProvideSessionManagerFactory.provideSessionManager(singletonCImpl.appModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 1: // com.bb.bigbasketsalesapp.data.BBSalesRepository 
          return (T) AppModule_ProvideRepositoryFactory.provideRepository(singletonCImpl.appModule);

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
